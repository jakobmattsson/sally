# Deploying

Just run `jitsu deploy`


### Auth

Three levels of auth:
* read
* write
* create

If no auth-function is written, anyone is allowed to do every operation (even anonymous users)
If an "auth" function is created, that one will be used as basis for all three level.
If an "authWrite" function is created, that one will be used for write and create.
If an "authCreate" function is created, that one will be used to authorize create-actions.

All the auth functions recieves a user as input parameter and returns an object describing the access level.
It should be interpreted like this:
* null means: you must authorize yourself
* {} means: you are allowed access to every object in the collection
* any other object means: you are allowed access to those objects matching the given object



### ToDo

Lägg till statiska filer, tex /favicon.ico



AUTHENTICATION
Ägarskap är aldrig föränderligt (detta gör många saker mycket lättare)
Förusatt att authentication alltid baseras på ägarskapsheirarkin så kan med fylla ut alla objekt med redundans
Den här redundansen kan sedan användas för att avgöra om man har tillgång till objektet eller ej


Borde testa att indirekta ägare också kopieras över när man lägger till ett nytt löv i heirarkin


Natural IDs. En kolumn som är sträng eller integer och unik över hela modellen kan användas som nyckel.
Borde finnas en option för att göra just det.
Först och främst behöver jag en option för att säga att en kolumn ska vara unik.

Many-to-many relations

Making a super simple GUI (just tables)
JSONP-friendly
Getting it to run properly on nodejitsu, with their mongodb

Måste kunna skriva "pre"- och "post"-middleware här i denna filen. För tex auth.

Nested data structures (tänk prowikes översättningar)

Many-to-many:
* vilka kontakter var på mötet?
* vilken kontakt ringde jag?
* vilka av våra anställda var det som ringde samtalet eller gick på mötet?

LIST meetings/1234/contacts
LIST calls/1234/contacts

POST meetings/1234/contacts/567
DEL meetings/1234/contacts/567

Det kan absolut få finnas data i den här relationen. Den kan man sätta med POST, uppdatera med PUT och läsa med GET som vanligt

Kontakterna som kopplas ihop med ett möte måste valideras så att båda formerna av resurser hör till samma company

Se till att vanliga användare (eller icke-authade) inte kan skapa account genom en vanlig /POST
